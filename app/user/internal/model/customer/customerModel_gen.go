// Code generated by goctl. DO NOT EDIT!

package customer

import (
	"context"
	"database/sql"
	"go-zero-base/common/pkg/gormx"
	"time"

	"gorm.io/gorm"
)

type (
	customerModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *Customer) error

		FindOne(ctx context.Context, id int64) (*Customer, error)
		Update(ctx context.Context, tx *gorm.DB, data *Customer) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultCustomerModel struct {
		conn  *gorm.DB
		table string
	}

	Customer struct {
		Id            int64          `gorm:"column:id"`
		CreatedAt     sql.NullTime   `gorm:"column:created_at"`
		UpdatedAt     sql.NullTime   `gorm:"column:updated_at"`
		UserName      sql.NullString `gorm:"column:user_name"` // 用户名
		Password      sql.NullString `gorm:"column:password"`
		Creator       sql.NullString `gorm:"column:creator"`
		Updater       sql.NullString `gorm:"column:updater"`
		Status        sql.NullInt64  `gorm:"column:status"`
		Phone         sql.NullString `gorm:"column:phone"` // 联系方式
		Appendix      sql.NullString `gorm:"column:appendix"`
		RealName      sql.NullString `gorm:"column:real_name"`
		Remark        sql.NullString `gorm:"column:remark"`   // 备注
		Contact       sql.NullString `gorm:"column:contact"`  // 联系人
		AgentId       sql.NullInt64  `gorm:"column:agent_id"` // 代理商id
		BusinessIds   sql.NullString `gorm:"column:business_ids"`
		HousekeeperId sql.NullInt64  `gorm:"column:housekeeper_id"` // 管家id
		Industry      sql.NullString `gorm:"column:industry"`       // 行业
		OFat          time.Time      `gorm:"column:o_fat"`          // 巨量首次达标日期
		KFat          time.Time      `gorm:"column:k_fat"`          // 快手首次达标日期
		IFat          time.Time      `gorm:"column:i_fat"`          // 快手首次达标日期
		Ratio         float64        `gorm:"column:ratio"`          // 服务费率
		Commission    int64          `gorm:"column:commission"`     // 是否返佣 1 是 2 否
		UFat          time.Time      `gorm:"column:u_fat"`          // uc首次达标日期
		Role          int64          `gorm:"column:role"`           // 账号角色 0-客户 1-运营
		PId           int64          `gorm:"column:p_id"`           // 所属父类id
		Type          int64          `gorm:"column:type"`           // 客户类型：1直签,2代理
		Subject       string         `gorm:"column:subject"`        // 合同主体
	}
)

func (Customer) TableName() string {
	return "`customer`"
}

func newCustomerModel(conn *gorm.DB) *defaultCustomerModel {
	return &defaultCustomerModel{
		conn:  conn,
		table: "`customer`",
	}
}

func (m *defaultCustomerModel) Insert(ctx context.Context, tx *gorm.DB, data *Customer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultCustomerModel) FindOne(ctx context.Context, id int64) (*Customer, error) {
	var resp Customer
	err := m.conn.WithContext(ctx).Model(&Customer{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCustomerModel) Update(ctx context.Context, tx *gorm.DB, data *Customer) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultCustomerModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&Customer{}, id).Error

	return err
}

func (m *defaultCustomerModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
