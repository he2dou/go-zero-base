// Code generated by goctl. DO NOT EDIT!

package user

import (
	"context"
	"database/sql"
	"go-zero-base/common/gormx"
	"time"

	"gorm.io/gorm"
)

type (
	userModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *User) error

		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByMobile(ctx context.Context, mobile string) (*User, error)
		FindOneByName(ctx context.Context, name string) (*User, error)
		Update(ctx context.Context, tx *gorm.DB, data *User) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserModel struct {
		conn  *gorm.DB
		table string
	}

	User struct {
		Id        int64          `gorm:"column:id"`
		Name      string         `gorm:"column:name"`     // The username
		Password  string         `gorm:"column:password"` // The user password
		Mobile    string         `gorm:"column:mobile"`   // The mobile phone number
		Gender    string         `gorm:"column:gender"`   // gender,male|female|unknown
		Nickname  string         `gorm:"column:nickname"` // The nickname
		Type      int64          `gorm:"column:type"`     // The user type, 0:normal,1:vip, for test golang keyword
		Country   string         `gorm:"column:country"`  // The user country
		CreateAt  sql.NullTime   `gorm:"column:create_at"`
		UpdateAt  time.Time      `gorm:"column:update_at"`
		DeletedAt gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (User) TableName() string {
	return "`user`"
}

func newUserModel(conn *gorm.DB) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, tx *gorm.DB, data *User) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	var resp User
	err := m.conn.WithContext(ctx).Model(&User{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByMobile(ctx context.Context, mobile string) (*User, error) {
	var resp User
	err := m.conn.WithContext(ctx).Model(&User{}).Where("`mobile` = ?", mobile).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByName(ctx context.Context, name string) (*User, error) {
	var resp User
	err := m.conn.WithContext(ctx).Model(&User{}).Where("`name` = ?", name).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case gormx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, tx *gorm.DB, data *User) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultUserModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.conn
	if tx != nil {
		db = tx
	}
	err := db.WithContext(ctx).Delete(&User{}, id).Error

	return err
}

func (m *defaultUserModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.conn.WithContext(ctx).Transaction(fn)
}
